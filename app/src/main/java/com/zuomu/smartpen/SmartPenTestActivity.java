package com.zuomu.smartpen;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;
import androidx.annotation.Nullable;

import com.zuomu.smartpen.connection.SmartPenConnection;

public class SmartPenTestActivity extends Activity {
    private static final String TAG = "SmartPenTestActivity";

    private SmartPenConnection penConnection;
    private TextView statusText;
    private ToggleButton laserToggle;
    private ToggleButton annotationToggle;
    private ToggleButton eraserToggle;
    private ToggleButton voiceToggle;
    private SeekBar thicknessSeekBar;
    private SeekBar redSeekBar;
    private SeekBar greenSeekBar;
    private SeekBar blueSeekBar;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_smart_pen_test);

        initViews();
        initPenConnection();
    }

    private void initViews() {
        statusText = findViewById(R.id.statusText);
        laserToggle = findViewById(R.id.laserToggle);
        annotationToggle = findViewById(R.id.annotationToggle);
        eraserToggle = findViewById(R.id.eraserToggle);
        voiceToggle = findViewById(R.id.voiceToggle);
        thicknessSeekBar = findViewById(R.id.thicknessSeekBar);
        redSeekBar = findViewById(R.id.redSeekBar);
        greenSeekBar = findViewById(R.id.greenSeekBar);
        blueSeekBar = findViewById(R.id.blueSeekBar);

        // 激光笔模式切换
        laserToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (penConnection != null && penConnection.isConnected()) {
                penConnection.setLaserMode(3, isChecked); // 默认3档
            }
        });

        // 注释模式切换
        annotationToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (penConnection != null && penConnection.isConnected()) {
                penConnection.setAnnotationMode(isChecked,
                        thicknessSeekBar.getProgress() + 1,
                        redSeekBar.getProgress(),
                        greenSeekBar.getProgress(),
                        blueSeekBar.getProgress());
            }
        });

        // 橡皮擦模式切换
        eraserToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (penConnection != null && penConnection.isConnected()) {
                penConnection.setEraserMode(isChecked, true, 3); // 默认像素橡皮擦，3档大小
            }
        });

        // 语音模式切换
        voiceToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (penConnection != null && penConnection.isConnected()) {
                penConnection.setVoiceMode(isChecked);
            }
        });

        // 寻找设备按钮
        Button findDeviceButton = findViewById(R.id.findDeviceButton);
        findDeviceButton.setOnClickListener(v -> {
            if (penConnection != null) {
                penConnection.findDevice();
            }
        });

        // 断开连接按钮
        Button disconnectButton = findViewById(R.id.disconnectButton);
        disconnectButton.setOnClickListener(v -> {
            if (penConnection != null) {
                penConnection.disconnect();
            }
        });

        // 粗细调节
        thicknessSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                if (fromUser && annotationToggle.isChecked()) {
                    updateAnnotationMode();
                }
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {}

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {}
        });

        // 颜色调节
        SeekBar.OnSeekBarChangeListener colorListener = new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                if (fromUser && annotationToggle.isChecked()) {
                    updateAnnotationMode();
                }
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {}

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {}
        };

        redSeekBar.setOnSeekBarChangeListener(colorListener);
        greenSeekBar.setOnSeekBarChangeListener(colorListener);
        blueSeekBar.setOnSeekBarChangeListener(colorListener);
    }

    private void initPenConnection() {
        penConnection =  SmartPenConnection.getInstance();
        penConnection.setOnPenConnectionListener(new SmartPenConnection.OnPenConnectionListener() {
            @Override
            public void onConnected() {
                runOnUiThread(() -> {
                    statusText.setText("已连接");
                    Toast.makeText(SmartPenTestActivity.this, "设备已连接", Toast.LENGTH_SHORT).show();
                });
            }

            @Override
            public void onFailed(String message) {
                runOnUiThread(() -> {
                    statusText.setText("连接失败: " + message);
                    Toast.makeText(SmartPenTestActivity.this, "连接失败: " + message, Toast.LENGTH_SHORT).show();
                });
            }

            @Override
            public void onDisconnected() {
                runOnUiThread(() -> {
                    statusText.setText("已断开");
                    Toast.makeText(SmartPenTestActivity.this, "设备已断开", Toast.LENGTH_SHORT).show();
                    resetToggleButtons();
                });
            }

            @Override
            public void onDataReceived(byte[] data) {
                // 处理接收到的数据
                Log.d(TAG, "Received data: " + bytesToHex(data));
            }
        });

        // 自动寻找设备
        penConnection.findDevice();
    }

    private void updateAnnotationMode() {
        if (penConnection != null && penConnection.isConnected()) {
            penConnection.setAnnotationMode(true,
                    thicknessSeekBar.getProgress() + 1,
                    redSeekBar.getProgress(),
                    greenSeekBar.getProgress(),
                    blueSeekBar.getProgress());
        }
    }

    private void resetToggleButtons() {
        laserToggle.setChecked(false);
        annotationToggle.setChecked(false);
        eraserToggle.setChecked(false);
        voiceToggle.setChecked(false);
    }

    private String bytesToHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02X ", b));
        }
        return sb.toString();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (penConnection != null) {
            penConnection.release();
        }
    }
}