package com.zuomu.smartpen;

import static com.zuomu.smartpen.connection.SmartPenConnection.bytesToHex;

import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.widget.Button;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ToggleButton;
import androidx.annotation.Nullable;

import com.zuomu.smartpen.connection.SmartPenConnection;

public class SmartPenTestActivity extends Activity {
    private static final String TAG = "SmartPenTestActivity";

    private SmartPenConnection penConnection;
    private TextView statusText;
    private ToggleButton laserToggle;
    private ToggleButton annotationToggle;
    private ToggleButton eraserToggle;
    private ToggleButton voiceToggle;
    private SeekBar thicknessSeekBar;
    private SeekBar redSeekBar;
    private SeekBar greenSeekBar;
    private SeekBar blueSeekBar;

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Log.d(TAG, "onCreate: Activity created.");
        setContentView(R.layout.activity_smart_pen_test);

        initViews();
        initPenConnection();
    }

    private void initViews() {
        Log.d(TAG, "initViews: Initializing UI components.");
        statusText = findViewById(R.id.statusText);
        laserToggle = findViewById(R.id.laserToggle);
        annotationToggle = findViewById(R.id.annotationToggle);
        eraserToggle = findViewById(R.id.eraserToggle);
        voiceToggle = findViewById(R.id.voiceToggle);
        thicknessSeekBar = findViewById(R.id.thicknessSeekBar);
        redSeekBar = findViewById(R.id.redSeekBar);
        greenSeekBar = findViewById(R.id.greenSeekBar);
        blueSeekBar = findViewById(R.id.blueSeekBar);

        // 激光笔模式切换
        laserToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {
            Log.d(TAG, "laserToggle: Checked changed to " + isChecked);
            if (penConnection != null && penConnection.isConnected()) {
                penConnection.setLaserMode(3, isChecked); // 默认3档
                Log.d(TAG, "laserToggle: setLaserMode(3, " + isChecked + ") called.");
            } else {
                Log.w(TAG, "laserToggle: Pen not connected or penConnection is null.");
                buttonView.setChecked(!isChecked); // Revert state if not connected
                Toast.makeText(SmartPenTestActivity.this, "设备未连接", Toast.LENGTH_SHORT).show();
            }
        });

        // 注释模式切换
        annotationToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {
            Log.d(TAG, "annotationToggle: Checked changed to " + isChecked);
            if (penConnection != null && penConnection.isConnected()) {
                penConnection.setAnnotationMode(isChecked,
                        thicknessSeekBar.getProgress() + 1,
                        redSeekBar.getProgress(),
                        greenSeekBar.getProgress(),
                        blueSeekBar.getProgress());
                Log.d(TAG, "annotationToggle: setAnnotationMode(" + isChecked + ", " + (thicknessSeekBar.getProgress() + 1) + ", " + redSeekBar.getProgress() + ", " + greenSeekBar.getProgress() + ", " + blueSeekBar.getProgress() + ") called.");
            } else {
                Log.w(TAG, "annotationToggle: Pen not connected or penConnection is null.");
                buttonView.setChecked(!isChecked); // Revert state if not connected
                Toast.makeText(SmartPenTestActivity.this, "设备未连接", Toast.LENGTH_SHORT).show();
            }
        });

        // 橡皮擦模式切换
        eraserToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {
            Log.d(TAG, "eraserToggle: Checked changed to " + isChecked);
            if (penConnection != null && penConnection.isConnected()) {
                penConnection.setEraserMode(isChecked, true, 3); // 默认像素橡皮擦，3档大小
                Log.d(TAG, "eraserToggle: setEraserMode(" + isChecked + ", true, 3) called.");
            } else {
                Log.w(TAG, "eraserToggle: Pen not connected or penConnection is null.");
                buttonView.setChecked(!isChecked); // Revert state if not connected
                Toast.makeText(SmartPenTestActivity.this, "设备未连接", Toast.LENGTH_SHORT).show();
            }
        });

        // 语音模式切换
        voiceToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {
            Log.d(TAG, "voiceToggle: Checked changed to " + isChecked);
            if (penConnection != null && penConnection.isConnected()) {
                penConnection.setVoiceMode(isChecked);
                Log.d(TAG, "voiceToggle: setVoiceMode(" + isChecked + ") called.");
            } else {
                Log.w(TAG, "voiceToggle: Pen not connected or penConnection is null.");
                buttonView.setChecked(!isChecked); // Revert state if not connected
                Toast.makeText(SmartPenTestActivity.this, "设备未连接", Toast.LENGTH_SHORT).show();
            }
        });

        // 寻找设备按钮
        Button findDeviceButton = findViewById(R.id.findDeviceButton);
        findDeviceButton.setOnClickListener(v -> {
            Log.d(TAG, "findDeviceButton: Clicked. Attempting to find device.");
            if (penConnection != null) {
                penConnection.findDevice();
            } else {
                Log.e(TAG, "findDeviceButton: penConnection is null.");
            }
        });

        // 断开连接按钮
        Button disconnectButton = findViewById(R.id.disconnectButton);
        disconnectButton.setOnClickListener(v -> {
            Log.d(TAG, "disconnectButton: Clicked. Attempting to disconnect.");
            if (penConnection != null) {
                penConnection.disconnect();
            } else {
                Log.e(TAG, "disconnectButton: penConnection is null.");
            }
        });

        // 粗细调节
        thicknessSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                Log.d(TAG, "thicknessSeekBar: Progress changed to " + progress + ", fromUser: " + fromUser);
                if (fromUser && annotationToggle.isChecked()) {
                    updateAnnotationMode();
                }
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
                Log.d(TAG, "thicknessSeekBar: Start tracking touch.");
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
                Log.d(TAG, "thicknessSeekBar: Stop tracking touch.");
            }
        });

        // 颜色调节
        SeekBar.OnSeekBarChangeListener colorListener = new SeekBar.OnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                Log.d(TAG, "colorSeekBar (ID: " + seekBar.getId() + "): Progress changed to " + progress + ", fromUser: " + fromUser);
                if (fromUser && annotationToggle.isChecked()) {
                    updateAnnotationMode();
                }
            }

            @Override
            public void onStartTrackingTouch(SeekBar seekBar) {
                Log.d(TAG, "colorSeekBar (ID: " + seekBar.getId() + "): Start tracking touch.");
            }

            @Override
            public void onStopTrackingTouch(SeekBar seekBar) {
                Log.d(TAG, "colorSeekBar (ID: " + seekBar.getId() + "): Stop tracking touch.");
            }
        };

        redSeekBar.setOnSeekBarChangeListener(colorListener);
        greenSeekBar.setOnSeekBarChangeListener(colorListener);
        blueSeekBar.setOnSeekBarChangeListener(colorListener);
        Log.d(TAG, "initViews: UI components initialized.");
    }

    private void initPenConnection() {
        Log.d(TAG, "initPenConnection: Initializing SmartPenConnection.");
        penConnection =  SmartPenConnection.getInstance();
        penConnection.setOnPenConnectionListener(new SmartPenConnection.OnPenConnectionListener() {
            @Override
            public void onConnected() {
                Log.d(TAG, "onConnected: Device connected.");
                runOnUiThread(() -> {
                    statusText.setText("已连接");
                    Toast.makeText(SmartPenTestActivity.this, "设备已连接", Toast.LENGTH_SHORT).show();
                });
            }

            @Override
            public void onFailed(String message) {
                Log.e(TAG, "onFailed: Connection failed: " + message);
                runOnUiThread(() -> {
                    statusText.setText("连接失败: " + message);
                    Toast.makeText(SmartPenTestActivity.this, "连接失败: " + message, Toast.LENGTH_SHORT).show();
                });
            }

            @Override
            public void onDisconnected() {
                Log.d(TAG, "onDisconnected: Device disconnected.");
                runOnUiThread(() -> {
                    statusText.setText("已断开");
                    Toast.makeText(SmartPenTestActivity.this, "设备已断开", Toast.LENGTH_SHORT).show();
                    resetToggleButtons();
                });
            }

            @Override
            public void onDataReceived(byte[] data) {
                Log.d(TAG, "onDataReceived: Received data: " + bytesToHex(data));
            }
        });

        // 自动寻找设备
        Log.d(TAG, "initPenConnection: Attempting to find device automatically.");
        penConnection.findDevice();
    }

    private void updateAnnotationMode() {
        Log.d(TAG, "updateAnnotationMode: Updating annotation mode.");
        if (penConnection != null && penConnection.isConnected()) {
            penConnection.setAnnotationMode(true,
                    thicknessSeekBar.getProgress() + 1,
                    redSeekBar.getProgress(),
                    greenSeekBar.getProgress(),
                    blueSeekBar.getProgress());
            Log.d(TAG, "updateAnnotationMode: setAnnotationMode called with current seekbar values.");
        } else {
            Log.w(TAG, "updateAnnotationMode: Pen not connected or penConnection is null. Cannot update annotation mode.");
        }
    }

    private void resetToggleButtons() {
        Log.d(TAG, "resetToggleButtons: Resetting all toggle buttons.");
        laserToggle.setChecked(false);
        annotationToggle.setChecked(false);
        eraserToggle.setChecked(false);
        voiceToggle.setChecked(false);
    }

    

    @Override
    protected void onDestroy() {
        super.onDestroy();
        Log.d(TAG, "onDestroy: Activity destroyed. Releasing pen connection.");
        if (penConnection != null) {
            penConnection.release();
        }
    }
}